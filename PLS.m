% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by NFTOOL
% Created Fri Oct 26 11:14:33 IRST 2012
%
% This script assumes these variables are defined:
%
%   Inputs - input data.
%   Targets - target data.
[Inputs,~,~,~,Targets,~] = makeDataFeatures;

inputs = Inputs;
targets = Targets;

% [O, N] = size(targets);
% [I, N] = size(inputs);
% Ntrn = 421;
% Nval = 210;
% Ntst = 371;
% Neq = Ntrn*O;
% Hub = floor((Neq-O)/(I+O+1));
H = 10;
% Nw = (I+1)*H(1)+(H(1)+1)*O;
% MSEgoal = 0.01*(Neq-Nw)*var(targets)/Neq;
Ntrials = 10;

[t, mt] = max(Targets);
% diffMatrix = [];
diffCount = [,];
Nets = cell(6,10);
for h=0:2:10
    % Create a Fitting Network
    H=h;
    for i=1:10
        hiddenLayerSize = H;
        if (H==0)
            net = patternnet([],'trainlm');
            Nw = (I+1)*O;
        else
            net = patternnet(hiddenLayerSize,'trainlm');
            Nw = O+(I+O+1)*H;
        end
%          MSEgoal =0.01*(Neq-Nw)*var(var(Targets))/Neq;
%          net.trainParam.goal   =  MSEgoal ;
        % Setup Division of Data for Training, Validation, Testing
        net.divideParam.trainRatio = 70/100;
        net.divideParam.valRatio = 15/100;
        net.divideParam.testRatio = 15/100;
        % Train the Network
        [net,tr] = train(net,inputs,targets);
        HIndex = (h/2)+1;
        if (H~=0)
            HIndex = (h/2)+1;
        else
            HIndex = 1;
        end
        Nets{HIndex,i} = net;
        output = sim(net, Inputs);
        [x, mx] = max(output);
        diffCount(HIndex,i) = 0;
        for j=1:size(mx,2)
            if (mx(j) ~= mt(j))
                %diffMatrix(HIndex,end+1) = j;
                diffCount(HIndex,i) = diffCount(i)+1;
            end
        end
    end
end
% Test the Network
outputs = net(inputs);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs);

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotfit(net,inputs,targets)
%figure, plotregression(targets,outputs)
%figure, ploterrhist(errors)